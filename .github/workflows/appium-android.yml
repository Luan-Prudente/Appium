name: Appium Android

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: windows-latest
    env:
      ANDROID_HOME: C:\Android\sdk
      PATH: ${{ env.ANDROID_HOME }}\emulator;${{ env.ANDROID_HOME }}\platform-tools;${{ env.ANDROID_HOME }}\cmd;${{ env.PATH }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'temurin'

    - name: Set up Android SDK
      uses: android-actions/setup-android@v3

    - name: Configure JAXB environment
      run: |
        # Cria diretório para bibliotecas JAXB
        New-Item -ItemType Directory -Path jaxb_libs -Force

        # Baixa bibliotecas JAXB necessárias
        $libs = @(
          @{Name="jaxb-api.jar"; Url="https://repo1.maven.org/maven2/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.jar"},
          @{Name="jaxb-core.jar"; Url="https://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-core-2.3.0.1.jar"},
          @{Name="jaxb-impl.jar"; Url="https://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.3.1/jaxb-impl-2.3.1.jar"},
          @{Name="activation.jar"; Url="https://repo1.maven.org/maven2/javax/activation/activation/1.1.1/activation-1.1.1.jar"}
        )

        foreach ($lib in $libs) {
          Invoke-WebRequest -Uri $lib.Url -OutFile "jaxb_libs\$($lib.Name)"
        }

    - name: Accept Android licenses
      run: |
        if (-not (Test-Path "$env:ANDROID_HOME\licenses")) {
          New-Item -ItemType Directory -Path "$env:ANDROID_HOME\licenses" -Force
        }
        
        "8933bad161af4178b1185d1a37fbf41ea5269c55" | Out-File -FilePath "$env:ANDROID_HOME\licenses\android-sdk-license" -Encoding ASCII
        "d56f5187479451eabf01fb78af6dfcb131a6481e" | Out-File -FilePath "$env:ANDROID_HOME\licenses\android-sdk-license" -Append -Encoding ASCII

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Appium
      run: |
        npm install -g appium@2.0
        npm install -g appium-doctor
        appium-doctor --android

    - name: Set up Android emulator
      run: |
        .\sdkmanager.bat "platform-tools" "emulator" "platforms;android-34"
        .\sdkmanager.bat "system-images;android-34;google_apis;x86_64"
        avdmanager create avd -n test -k "system-images;android-34;google_apis;x86_64" -d pixel_4 -f

    - name: Start Appium server
      run: |
        Start-Process -FilePath "appium" -ArgumentList "--relaxed-security","--log-level","debug" -WindowStyle Hidden
        Start-Sleep -Seconds 15

    - name: Start emulator
      run: |
        Start-Process -FilePath "$env:ANDROID_HOME\emulator\emulator" -ArgumentList "-avd","test","-no-window","-gpu","swiftshader_indirect" -WindowStyle Hidden
        adb wait-for-device
        while (-not ((adb shell getprop sys.boot_completed) -eq "1")) {
          Start-Sleep -Seconds 5
          Write-Host "Waiting for emulator..."
        }

    - name: Run Appium tests
      run: |
        mvn clean test -Pandroid -Dappium.server.url=http://127.0.0.1:4723

    - name: Upload test reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-reports
        path: |
          target/surefire-reports/
          target/screenshots/
